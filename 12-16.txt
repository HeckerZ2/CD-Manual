12.Write a program to implement to recognize a valid control structures syntax of C language using For loop and while loop

%{
#include <stdio.h>
%}

%option noyywrap

/* Regular Expressions for Patterns */
FOR     for\s*\(\s*[^;]+;\s*[^;]+;\s*[^;]+\s*\)\s*\{
WHILE   while\s*\(\s*.+\s*\)\s*\{

%%

{FOR}   { printf("Valid 'for' loop: %s\n", yytext); }
{WHILE} { printf("Valid 'while' loop: %s\n", yytext); }
.|\n    { /* Ignore everything else */ }

%%

int main() {
    yylex();  // Start the lexical analysis
    return 0;
}

13. Write a program to Convert the BNF rules into Yacc form and write code to generate abstract 
syntax tree. 

Simplified YACC Code (parser.y):
yacc
Copy code
%{
#include <stdio.h>
#include <stdlib.h>

typedef struct AST {
    char *value;
    struct AST *left, *right;
} AST;

AST *create_node(char *value, AST *left, AST *right) {
    AST *node = (AST *)malloc(sizeof(AST));
    node->value = value;
    node->left = left;
    node->right = right;
    return node;
}

void print_ast(AST *node) {
    if (node) {
        if (node->left) print_ast(node->left);  // Print left subtree
        printf("%s ", node->value);  // Print current node
        if (node->right) print_ast(node->right);  // Print right subtree
    }
}

%}

%token NUM
%union { int num; AST *node; }

%type <node> expr term factor
%left '+' '-'
%left '*' '/'

%%

expr   : term '+' expr   { $$ = create_node("+", $1, $3); }
       | term '-' expr   { $$ = create_node("-", $1, $3); }
       | term            { $$ = $1; };

term   : factor '' term { $$ = create_node("", $1, $3); }
       | factor '/' term { $$ = create_node("/", $1, $3); }
       | factor          { $$ = $1; };

factor : NUM             { char *num = malloc(16); sprintf(num, "%d", $1); $$ = create_node(num, NULL, NULL); };

%%

#include "lex.yy.c"

int main() {
    printf("Enter expression: ");
    yyparse();
    printf("AST: ");
    print_ast(yylval.node);
    printf("\n");
    return 0;
}

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}
Simplified Lex Code (lexer.l):
lex
Copy code
%{
#include "y.tab.h"
%}

%%

[0-9]+  { yylval.num = atoi(yytext); return NUM; }
"+"     { return '+'; }
"-"     { return '-'; }
""     { return ''; }
"/"     { return '/'; }
[ \t\n]+ { /* Ignore whitespace */ }
.       { return yytext[0]; }

%%


14. Write a program to implement to recognize a valid control structures syntax of C language using 
ifelse, if-else-if and switch-case. 

%{
#include <stdio.h>
%}

%token IF ELSE ELSEIF SWITCH CASE DEFAULT
%token LPAREN RPAREN LBRACE RBRACE
%token IDENTIFIER NUM

%%
"if"        { printf("Found 'if' statement\n"); }
"else"      { printf("Found 'else' statement\n"); }
"else if"   { printf("Found 'else if' statement\n"); }
"switch"    { printf("Found 'switch' statement\n"); }
"case"      { printf("Found 'case' statement\n"); }
"default"   { printf("Found 'default' statement\n"); }
"("         | ")" | "{" | "}"   { /* Ignore parentheses and braces */ }
[0-9]+      { return NUM; }
[a-zA-Z_][a-zA-Z0-9_]* { return IDENTIFIER; }
[ \t\n]+    { /* Ignore whitespace */ }
.           { return yytext[0]; }

%%
int main() {
    printf("Enter C control structures (if-else, switch-case):\n");
    yylex();
    return 0;
}

15. Write a program to Implement any one storage allocation strategies 

#include <stdio.h>

#define S 100
int a[S];  // 0 = free, 1 = allocated

int alloc(int b) {
    for (int i = 0; i < S - b + 1; i++) {
        int j;
        for (j = 0; j < b && !a[i + j]; j++);
        if (j == b) {
            for (j = 0; j < b; a[i + j++] = 1);
            printf("Allocated %d blocks at position %d\n", b, i);
            return 1;
        }
    }
    printf("Storage allocation failed for %d blocks\n", b);
    return 0;
}

int main() {
    int b;
    while (1) {
        printf("Enter size to allocate (0 to exit): ");
        if (scanf("%d", &b), !b) break;
        alloc(b);  // Only allocate, no freeing
    }
    return 0;
}


16. Write a program to Implement type checking.

#include <stdio.h>
#include <string.h>

typedef enum { INT, FLOAT, STRING } Type;

Type check_type(char *input) {
    if (strchr(input, '.')) return FLOAT;
    for (int i = 0; input[i] != '\0'; i++) if (input[i] < '0' || input[i] > '9') return STRING;
    return INT;
}

int main() {
    char input[100];
    printf("Enter a value: ");
    scanf("%s", input);
    
    Type t = check_type(input);
    if (t == INT) printf("Integer\n");
    else if (t == FLOAT) printf("Float\n");
    else printf("String\n");
    
    return 0;
}


