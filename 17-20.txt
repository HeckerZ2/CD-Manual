17. Write a program to Implement Simple Code Optimization Techniques using Strength reduction 
#include <stdio.h>

void f(int *a, int b) {
    for (int i = 0; i < b; i++) {
        a[i] = a[i] << 2;
    }
}

int main() {
    int a[] = {1, 2, 3, 4, 5};
    int b = sizeof(a) / sizeof(a[0]);

    printf("Original array: ");
    for (int i = 0; i < b; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    f(a, b);

    printf("Optimized array: ");
    for (int i = 0; i < b; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}


18. Write a program to implement to implement the symbol table 

#include <stdio.h>
#include <string.h>

#define N 10

typedef struct {
    char n[50];
    char t[20];
} S;

S tbl[N];
int cnt = 0;

int ins(char *n, char *t) {
    if (cnt >= N) {
        printf("Table full.\n");
        return -1;
    }
    strcpy(tbl[cnt].n, n);
    strcpy(tbl[cnt].t, t);
    cnt++;
    return 0;
}

void disp() {
    printf("Symbol Table:\n");
    for (int i = 0; i < cnt; i++) {
        printf("Name: %s, Type: %s\n", tbl[i].n, tbl[i].t);
    }
}

int main() {
    ins("x", "int");
    ins("y", "float");
    ins("z", "char");
    disp();
    return 0;
}



19. Write a program to Implement Simple Code Optimization Techniques using Algebraic transformation 

#include <stdio.h>

int original_expression(int x) {
    return x * 1 + x + 0;
}

int optimized_expression(int x) {
    return x + x;
}

int original_expression2(int a, int b, int c) {
    return a * b + a * c;
}

int optimized_expression2(int a, int b, int c) {
    return a * (b + c);
}

int main() {
    int x, a, b, c;

    printf("Enter a value for x: ");
    scanf("%d", &x);

    printf("Original Expression 1 result: %d\n", original_expression(x));
    printf("Optimized Expression 1 result: %d\n", optimized_expression(x));

    printf("Enter values for a, b, and c: ");
    scanf("%d %d %d", &a, &b, &c);

    printf("Original Expression 2 result: %d\n", original_expression2(a, b, c));
    printf("Optimized Expression 2 result: %d\n", optimized_expression2(a, b, c));

    return 0;
}



20. Write a program to generate three address code using LEX and YACC.

Lex File (lexer.l)
c
Copy code
%{
#include "y.tab.h"
%}

%%
[0-9]+     { yylval.num = atoi(yytext); return NUM; }
"+"        { return PLUS; }
"-"        { return MINUS; }
"*"        { return MUL; }
"/"        { return DIV; }
"("        { return LPAREN; }
")"        { return RPAREN; }
[ \t\n]    { /* Ignore whitespace */ }
.          { return yytext[0]; }
%%

int yywrap() { return 1; }
Yacc File (parser.y)
c
Copy code
%{
#include <stdio.h>
#include <stdlib.h>

int temp_count = 0;

char* new_temp() {
    char *temp = (char *)malloc(10 * sizeof(char));
    sprintf(temp, "t%d", temp_count++);
    return temp;
}

void emit(char *op, char *arg1, char *arg2, char *result) {
    printf("%s = %s %s %s\n", result, arg1, op, arg2);
}

%}

%union {
    int num;
    char* str;
}

%token <num> NUM
%token PLUS MINUS MUL DIV
%token LPAREN RPAREN
%type <str> expr term factor

%%

program:
    expr { printf("Result: %s\n", $1); }
;

expr:
      expr PLUS term { $$ = new_temp(); emit("+", $1, $3, $$); }
    | expr MINUS term { $$ = new_temp(); emit("-", $1, $3, $$); }
    | term { $$ = $1; }
;

term:
      term MUL factor { $$ = new_temp(); emit("*", $1, $3, $$); }
    | term DIV factor { $$ = new_temp(); emit("/", $1, $3, $$); }
    | factor { $$ = $1; }
;

factor:
      NUM { $$ = new_temp(); printf("%s = %d\n", $$, $1); }
    | LPAREN expr RPAREN { $$ = $2; }
;

%%

#include "lex.yy.c"

int main() {
    printf("Enter an expression: ");
    yyparse();
    return 0;
}

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}


